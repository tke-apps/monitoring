grafana:
  adminUser: "admin"
  adminPassword: "admin"
  defaultDashboardsTimeZone: "browser"
  sidecar:
    image:
      registry: docker.io/kiwigrid
      repository: k8s-sidecar
  testFramework:
    enabled: false
alertmanager:
  alertmanagerSpec:
    image:
      registry: docker.io
      repository: imroc/prometheus-alertmanager
prometheus:
  prometheusSpec:
    image:
      registry: docker.io
      repository: imroc/prometheus
    additionalScrapeConfigs:
      - job_name: serverless-pod # 采集超级节点每个 Pod 子机的监控数据
        honor_timestamps: true
        metrics_path: "/metrics" # 所有健康数据都在这个路径
        params: # 通常需要加参数过滤掉 ipvs 相关的指标，因为可能数据量较大，打高 Pod 负载。
          collect[]:
            - "ipvs"
          # - 'cpu'
          # - 'meminfo'
          # - 'diskstats'
          # - 'filesystem'
          # - 'load0vg'
          # - 'netdev'
          # - 'filefd'
          # - 'pressure'
          # - 'vmstat'
        scheme: http
        kubernetes_sd_configs:
          - role: pod # 超级节点 Pod 的监控数据暴露在 Pod 自身 IP 的 9100 端口，所以使用 Pod 服务发现
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_pod_annotation_tke_cloud_tencent_com_pod_type]
            regex: eklet # 如果是标准集群，超级节点的 Pod 会此注解，加上此条件只采集超级节点的 Pod
            action: keep
          - source_labels: [__meta_kubernetes_pod_phase]
            regex: Running # 非 Running 状态的 Pod 机器资源已释放，不需要采集
            action: keep
          - source_labels: [__meta_kubernetes_pod_ip]
            separator: ;
            regex: (.*)
            target_label: __address__
            replacement: ${1}:9100 # 监控指标暴露在 Pod 的 9100 端口
            action: replace
          - source_labels: [__meta_kubernetes_pod_name]
            separator: ;
            regex: (.*)
            target_label: pod # 将 Pod 名字写到 "pod" label
            replacement: ${1}
            action: replace
          - source_labels: [__meta_kubernetes_namespace]
            separator: ;
            regex: (.*)
            target_label: namespace # 将 Pod 所在 namespace 写到 "namespace" label
            replacement: ${1}
            action: replace
        metric_relabel_configs:
          - source_labels: [__name__]
            separator: ;
            regex: (container_.*|pod_.*|kubelet_.*)
            replacement: $1
            action: keep
prometheusOperator:
  image:
    registry: docker.io
    repository: imroc/prometheus-operator
  admissionWebhooks:
    deployment:
      image:
        registry: docker.io
        repository: imroc/prometheus-operator-admission-webhook
    patch:
      image:
        registry: docker.io
        repository: k8smirror/ingress-nginx-kube-webhook-certgen
  prometheusConfigReloader:
    image:
      registry: docker.io
      repository: docker.io/imroc/prometheus-config-reloader
  thanosImage:
    registry: docker.io
    repository: imroc/thanos
thanosRuler:
  thanosRulerSpec:
    image:
      registry: docker.io
      repository: imroc/thanos
kube-state-metrics:
  image:
    registry: docker.io
    repository: k8smirror/kube-state-metrics
prometheus-node-exporter:
  image:
    registry: docker.io
    repository: imroc/prometheus-node-exporter
  kubeRBACProxy:
    image:
      registry: quay.io
      repository: brancz/kube-rbac-proxy
kubelet:
  serviceMonitor: # 排除超级节点
    relabelings:
      - source_labels:
          - __meta_kubernetes_node_label_node_kubernetes_io_instance_type
        regex: eklet
        action: drop
    probesRelabelings:
      - source_labels:
          - __meta_kubernetes_node_label_node_kubernetes_io_instance_type
        regex: eklet
        action: drop
    cAdvisorRelabelings:
      - source_labels:
          - __meta_kubernetes_node_label_node_kubernetes_io_instance_type
        regex: eklet
        action: drop
    resourceRelabelings:
      - source_labels:
          - __meta_kubernetes_node_label_node_kubernetes_io_instance_type
        regex: eklet
        action: drop
